// Generated by odin.dust (version 0.2.15) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}
// [[dust::class(model)]]
// [[dust::param(A0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(E0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(F0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(P0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(R0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(S0, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(U0, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(alpha, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_A, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_E, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_F, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_P, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_R, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(delta_S, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_A, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_E, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_F, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_P, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_R, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_S, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(omega, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_F, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_I, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_R, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_S, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_T, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(phi_S, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(q_F, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(sigma, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(t_s, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(theta_A, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_group, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(r_age, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(t0, has_default = TRUE, default_value = 0L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class model {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  using data_type = dust::no_data;
  struct shared_type {
    std::vector<real_type> A0;
    std::vector<real_type> E0;
    std::vector<real_type> F0;
    std::vector<real_type> P0;
    std::vector<real_type> R0;
    std::vector<real_type> S0;
    std::vector<real_type> U0;
    std::vector<real_type> alpha;
    real_type beta;
    real_type delta_A;
    real_type delta_E;
    real_type delta_F;
    real_type delta_P;
    real_type delta_R;
    real_type delta_S;
    int dim_A;
    int dim_A0;
    int dim_A0_1;
    int dim_A0_2;
    int dim_A_1;
    int dim_A_2;
    int dim_E;
    int dim_E0;
    int dim_E0_1;
    int dim_E0_2;
    int dim_E_1;
    int dim_E_2;
    int dim_F;
    int dim_F0;
    int dim_F0_1;
    int dim_F0_2;
    int dim_F_1;
    int dim_F_2;
    int dim_N;
    int dim_P;
    int dim_P0;
    int dim_P0_1;
    int dim_P0_2;
    int dim_P_1;
    int dim_P_2;
    int dim_R;
    int dim_R0;
    int dim_R0_1;
    int dim_R0_2;
    int dim_R_1;
    int dim_R_2;
    int dim_S;
    int dim_S0;
    int dim_S0_1;
    int dim_S0_2;
    int dim_S_1;
    int dim_S_2;
    int dim_U;
    int dim_U0;
    int dim_alpha;
    int dim_dem_A;
    int dim_dem_A_1;
    int dim_dem_A_2;
    int dim_dem_E;
    int dim_dem_E_1;
    int dim_dem_E_2;
    int dim_dem_F;
    int dim_dem_F_1;
    int dim_dem_F_2;
    int dim_dem_N;
    int dim_dem_P;
    int dim_dem_P_1;
    int dim_dem_P_2;
    int dim_dem_R;
    int dim_dem_R_1;
    int dim_dem_R_2;
    int dim_dem_S;
    int dim_dem_S_1;
    int dim_dem_S_2;
    int dim_dem_U;
    int dim_foi;
    int dim_gas_A;
    int dim_gas_A_1;
    int dim_gas_A_2;
    int dim_gas_E;
    int dim_gas_E_1;
    int dim_gas_E_2;
    int dim_gas_F;
    int dim_gas_F_1;
    int dim_gas_F_2;
    int dim_gas_P;
    int dim_gas_P_1;
    int dim_gas_P_2;
    int dim_gas_R;
    int dim_gas_R_1;
    int dim_gas_R_2;
    int dim_gas_S;
    int dim_gas_S_1;
    int dim_gas_S_2;
    int dim_gas_U;
    int dim_gas_pharyngitis_inc_by_group;
    int dim_lambda;
    int dim_lambda_1;
    int dim_lambda_2;
    int dim_m;
    int dim_m_1;
    int dim_m_2;
    int dim_n_A;
    int dim_n_AR;
    int dim_n_AU;
    int dim_n_A_1;
    int dim_n_A_2;
    int dim_n_Ai;
    int dim_n_Ai_1;
    int dim_n_Ai_2;
    int dim_n_Ax;
    int dim_n_Ax_1;
    int dim_n_Ax_2;
    int dim_n_E;
    int dim_n_EP;
    int dim_n_ES;
    int dim_n_E_1;
    int dim_n_E_2;
    int dim_n_Ei;
    int dim_n_Ei_1;
    int dim_n_Ei_2;
    int dim_n_Ex;
    int dim_n_Ex_1;
    int dim_n_Ex_2;
    int dim_n_F;
    int dim_n_FR;
    int dim_n_F_1;
    int dim_n_F_2;
    int dim_n_Fi;
    int dim_n_Fi_1;
    int dim_n_Fi_2;
    int dim_n_Fx;
    int dim_n_Fx_1;
    int dim_n_Fx_2;
    int dim_n_I;
    int dim_n_Nx;
    int dim_n_P;
    int dim_n_PF;
    int dim_n_P_1;
    int dim_n_P_2;
    int dim_n_Pi;
    int dim_n_Pi_1;
    int dim_n_Pi_2;
    int dim_n_Px;
    int dim_n_Px_1;
    int dim_n_Px_2;
    int dim_n_R;
    int dim_n_RU;
    int dim_n_R_1;
    int dim_n_R_2;
    int dim_n_Ri;
    int dim_n_Ri_1;
    int dim_n_Ri_2;
    int dim_n_Rx;
    int dim_n_Rx_1;
    int dim_n_Rx_2;
    int dim_n_S;
    int dim_n_SR;
    int dim_n_S_1;
    int dim_n_S_2;
    int dim_n_Si;
    int dim_n_Si_1;
    int dim_n_Si_2;
    int dim_n_Sx;
    int dim_n_Sx_1;
    int dim_n_Sx_2;
    int dim_n_U;
    int dim_n_UA;
    int dim_n_UE;
    int dim_n_Ui;
    int dim_n_Ux;
    int dim_n_xU;
    int dim_omega;
    int dim_phi_S;
    int dim_prev_A;
    int dim_prev_R;
    int dim_q_F;
    int dim_r_A;
    int dim_r_E;
    int dim_r_F;
    int dim_r_I;
    int dim_r_P;
    int dim_r_R;
    int dim_r_S;
    int dim_r_U;
    int dim_scarlet_fever_inc_by_group;
    int dim_w;
    int dim_weighted_phi_S;
    real_type dt;
    std::vector<real_type> initial_A;
    std::vector<real_type> initial_E;
    std::vector<real_type> initial_F;
    std::vector<real_type> initial_N;
    std::vector<real_type> initial_P;
    std::vector<real_type> initial_R;
    std::vector<real_type> initial_S;
    std::vector<real_type> initial_U;
    real_type initial_beta_t;
    real_type initial_births_inc;
    real_type initial_daily_gas_pharyngitis_rate;
    real_type initial_daily_gas_pharyngitis_rate_04;
    real_type initial_daily_gas_pharyngitis_rate_05_14;
    real_type initial_daily_gas_pharyngitis_rate_15_44;
    real_type initial_daily_gas_pharyngitis_rate_45_64;
    real_type initial_daily_gas_pharyngitis_rate_65_74;
    real_type initial_daily_gas_pharyngitis_rate_75;
    real_type initial_daily_scarlet_fever_rate;
    real_type initial_daily_scarlet_fever_rate_04;
    real_type initial_daily_scarlet_fever_rate_05_14;
    real_type initial_daily_scarlet_fever_rate_15_44;
    real_type initial_daily_scarlet_fever_rate_45_64;
    real_type initial_daily_scarlet_fever_rate_65_74;
    real_type initial_daily_scarlet_fever_rate_75;
    real_type initial_etiologic_fraction;
    real_type initial_etiologic_fraction_04;
    real_type initial_etiologic_fraction_05_14;
    real_type initial_etiologic_fraction_15_44;
    real_type initial_etiologic_fraction_45_64;
    real_type initial_etiologic_fraction_65_74;
    real_type initial_etiologic_fraction_75;
    real_type initial_gas_pharyngitis_inc;
    real_type initial_igas_inc;
    real_type initial_infections_inc;
    real_type initial_net_leavers_inc;
    std::vector<real_type> initial_prev_A;
    std::vector<real_type> initial_prev_R;
    real_type initial_scarlet_fever_cases;
    real_type initial_scarlet_fever_inc;
    real_type initial_scarlet_fever_inc_04;
    real_type initial_scarlet_fever_inc_05_14;
    real_type initial_scarlet_fever_inc_15_44;
    real_type initial_scarlet_fever_inc_45_64;
    real_type initial_scarlet_fever_inc_65_74;
    real_type initial_scarlet_fever_inc_75;
    real_type initial_time;
    int k_A;
    int k_E;
    int k_F;
    int k_P;
    int k_R;
    int k_S;
    std::vector<real_type> m;
    int n_group;
    int offset_variable_A;
    int offset_variable_E;
    int offset_variable_F;
    int offset_variable_N;
    int offset_variable_P;
    int offset_variable_R;
    int offset_variable_S;
    int offset_variable_prev_A;
    int offset_variable_prev_R;
    std::vector<real_type> omega;
    real_type p_F;
    real_type p_I;
    real_type p_R;
    real_type p_S;
    real_type p_T;
    std::vector<real_type> phi_S;
    real_type pi;
    std::vector<real_type> q_F;
    std::vector<real_type> r_A;
    std::vector<real_type> r_E;
    std::vector<real_type> r_F;
    std::vector<real_type> r_P;
    std::vector<real_type> r_R;
    std::vector<real_type> r_S;
    real_type r_age;
    real_type sigma;
    real_type steps_per_week;
    real_type t0;
    real_type t_s;
    real_type theta_A;
  };
  struct internal_type {
    std::vector<real_type> dem_A;
    std::vector<real_type> dem_E;
    std::vector<real_type> dem_F;
    std::vector<real_type> dem_N;
    std::vector<real_type> dem_P;
    std::vector<real_type> dem_R;
    std::vector<real_type> dem_S;
    std::vector<real_type> dem_U;
    std::vector<real_type> foi;
    std::vector<real_type> gas_A;
    std::vector<real_type> gas_E;
    std::vector<real_type> gas_F;
    std::vector<real_type> gas_P;
    std::vector<real_type> gas_R;
    std::vector<real_type> gas_S;
    std::vector<real_type> gas_U;
    std::vector<real_type> gas_pharyngitis_inc_by_group;
    std::vector<real_type> lambda;
    std::vector<real_type> n_A;
    std::vector<real_type> n_AR;
    std::vector<real_type> n_AU;
    std::vector<real_type> n_Ai;
    std::vector<real_type> n_Ax;
    std::vector<real_type> n_E;
    std::vector<real_type> n_EP;
    std::vector<real_type> n_ES;
    std::vector<real_type> n_Ei;
    std::vector<real_type> n_Ex;
    std::vector<real_type> n_F;
    std::vector<real_type> n_FR;
    std::vector<real_type> n_Fi;
    std::vector<real_type> n_Fx;
    std::vector<real_type> n_I;
    std::vector<real_type> n_Nx;
    std::vector<real_type> n_P;
    std::vector<real_type> n_PF;
    std::vector<real_type> n_Pi;
    std::vector<real_type> n_Px;
    std::vector<real_type> n_R;
    std::vector<real_type> n_RU;
    std::vector<real_type> n_Ri;
    std::vector<real_type> n_Rx;
    std::vector<real_type> n_S;
    std::vector<real_type> n_SR;
    std::vector<real_type> n_Si;
    std::vector<real_type> n_Sx;
    std::vector<real_type> n_U;
    std::vector<real_type> n_UA;
    std::vector<real_type> n_UE;
    std::vector<real_type> n_Ui;
    std::vector<real_type> n_Ux;
    std::vector<real_type> n_xU;
    std::vector<real_type> r_I;
    std::vector<real_type> r_U;
    std::vector<real_type> scarlet_fever_inc_by_group;
    std::vector<real_type> w;
    std::vector<real_type> weighted_phi_S;
  };
  model(const dust::pars_type<model>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return shared->dim_A + shared->dim_E + shared->dim_F + shared->dim_N + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  }
  std::vector<real_type> initial(size_t step) {
    std::vector<real_type> state(shared->dim_A + shared->dim_E + shared->dim_F + shared->dim_N + shared->dim_P + shared->dim_R + shared->dim_S + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36);
    state[0] = shared->initial_time;
    state[1] = shared->initial_infections_inc;
    state[2] = shared->initial_gas_pharyngitis_inc;
    state[3] = shared->initial_scarlet_fever_inc;
    state[4] = shared->initial_scarlet_fever_cases;
    state[5] = shared->initial_igas_inc;
    state[6] = shared->initial_births_inc;
    state[7] = shared->initial_net_leavers_inc;
    state[8] = shared->initial_beta_t;
    state[9] = shared->initial_daily_gas_pharyngitis_rate;
    state[10] = shared->initial_daily_scarlet_fever_rate;
    state[11] = shared->initial_etiologic_fraction;
    state[12] = shared->initial_daily_gas_pharyngitis_rate_04;
    state[13] = shared->initial_daily_gas_pharyngitis_rate_05_14;
    state[14] = shared->initial_daily_gas_pharyngitis_rate_15_44;
    state[15] = shared->initial_daily_gas_pharyngitis_rate_45_64;
    state[16] = shared->initial_daily_gas_pharyngitis_rate_65_74;
    state[17] = shared->initial_daily_gas_pharyngitis_rate_75;
    state[18] = shared->initial_daily_scarlet_fever_rate_04;
    state[19] = shared->initial_daily_scarlet_fever_rate_05_14;
    state[20] = shared->initial_daily_scarlet_fever_rate_15_44;
    state[21] = shared->initial_daily_scarlet_fever_rate_45_64;
    state[22] = shared->initial_daily_scarlet_fever_rate_65_74;
    state[23] = shared->initial_daily_scarlet_fever_rate_75;
    state[24] = shared->initial_scarlet_fever_inc_04;
    state[25] = shared->initial_scarlet_fever_inc_05_14;
    state[26] = shared->initial_scarlet_fever_inc_15_44;
    state[27] = shared->initial_scarlet_fever_inc_45_64;
    state[28] = shared->initial_scarlet_fever_inc_65_74;
    state[29] = shared->initial_scarlet_fever_inc_75;
    state[30] = shared->initial_etiologic_fraction_04;
    state[31] = shared->initial_etiologic_fraction_05_14;
    state[32] = shared->initial_etiologic_fraction_15_44;
    state[33] = shared->initial_etiologic_fraction_45_64;
    state[34] = shared->initial_etiologic_fraction_65_74;
    state[35] = shared->initial_etiologic_fraction_75;
    std::copy(shared->initial_U.begin(), shared->initial_U.end(), state.begin() + 36);
    std::copy(shared->initial_N.begin(), shared->initial_N.end(), state.begin() + shared->offset_variable_N);
    std::copy(shared->initial_prev_A.begin(), shared->initial_prev_A.end(), state.begin() + shared->offset_variable_prev_A);
    std::copy(shared->initial_prev_R.begin(), shared->initial_prev_R.end(), state.begin() + shared->offset_variable_prev_R);
    std::copy(shared->initial_A.begin(), shared->initial_A.end(), state.begin() + shared->offset_variable_A);
    std::copy(shared->initial_E.begin(), shared->initial_E.end(), state.begin() + shared->offset_variable_E);
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + shared->offset_variable_S);
    std::copy(shared->initial_P.begin(), shared->initial_P.end(), state.begin() + shared->offset_variable_P);
    std::copy(shared->initial_F.begin(), shared->initial_F.end(), state.begin() + shared->offset_variable_F);
    std::copy(shared->initial_R.begin(), shared->initial_R.end(), state.begin() + shared->offset_variable_R);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type * U = state + 36;
    const real_type * A = state + shared->offset_variable_A;
    const real_type * E = state + shared->offset_variable_E;
    const real_type * S = state + shared->offset_variable_S;
    const real_type * P = state + shared->offset_variable_P;
    const real_type * F = state + shared->offset_variable_F;
    const real_type * R = state + shared->offset_variable_R;
    const real_type * N = state + shared->offset_variable_N;
    const real_type births_inc = state[6];
    const real_type net_leavers_inc = state[7];
    const real_type infections_inc = state[1];
    const real_type igas_inc = state[5];
    const real_type beta_t = state[8];
    state_next[8] = shared->beta * (1 + shared->sigma * std::cos(2 * shared->pi * (shared->t0 + step - shared->t_s) / (real_type) 365.25));
    real_type alpha_t = (static_cast<int>(step) >= shared->dim_alpha ? shared->alpha[shared->dim_alpha - 1] : shared->alpha[step + 1 - 1]);
    real_type q_F_t = (static_cast<int>(step) >= shared->dim_q_F ? shared->q_F[shared->dim_q_F - 1] : shared->q_F[step + 1 - 1]);
    state_next[0] = (step + 1) * shared->dt;
    for (int i = 1; i <= shared->dim_n_Ui; ++i) {
      internal.n_Ui[i - 1] = ((i > 1 ? U[i - 1 - 1] : 0)) - ((i < shared->n_group ? U[i - 1] : 0));
    }
    for (int i = 1; i <= shared->dim_n_Ux; ++i) {
      internal.n_Ux[i - 1] = std::round(U[i - 1] * shared->omega[i - 1] * shared->dt);
    }
    {
       int i = 1;
       internal.n_xU[i - 1] = std::round(alpha_t * shared->dt);
    }
    for (int i = 1; i <= shared->dim_prev_A; ++i) {
      state_next[shared->offset_variable_prev_A + i - 1] = odin_sum2<real_type>(A, i - 1, i, 0, shared->dim_A_2, shared->dim_A_1) / (real_type) N[i - 1];
    }
    for (int i = 1; i <= shared->dim_prev_R; ++i) {
      state_next[shared->offset_variable_prev_R + i - 1] = odin_sum2<real_type>(R, i - 1, i, 0, shared->dim_R_2, shared->dim_R_1) / (real_type) N[i - 1];
    }
    for (int i = 1; i <= shared->dim_w; ++i) {
      internal.w[i - 1] = N[i - 1] / (real_type) 100000 * 7;
    }
    for (int i = 1; i <= shared->dim_weighted_phi_S; ++i) {
      internal.weighted_phi_S[i - 1] = shared->phi_S[i - 1] * N[i - 1];
    }
    for (int i = 1; i <= shared->dim_dem_U; ++i) {
      internal.dem_U[i - 1] = internal.n_xU[i - 1] + std::round(internal.n_Ui[i - 1] * shared->r_age * shared->dt) - internal.n_Ux[i - 1];
    }
    for (int i = 1; i <= shared->dim_lambda_1; ++i) {
      for (int j = 1; j <= shared->dim_lambda_2; ++j) {
        internal.lambda[i - 1 + shared->dim_lambda_1 * (j - 1)] = beta_t * shared->m[shared->dim_m_1 * (j - 1) + i - 1] * (odin_sum2<real_type>(A, j - 1, j, 0, shared->dim_A_2, shared->dim_A_1) * shared->theta_A + odin_sum2<real_type>(S, j - 1, j, 0, shared->dim_S_2, shared->dim_S_1) + odin_sum2<real_type>(P, j - 1, j, 0, shared->dim_P_2, shared->dim_P_1)) / (real_type) N[j - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_Ai_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ai_2; ++j) {
        internal.n_Ai[i - 1 + shared->dim_n_Ai_1 * (j - 1)] = ((i > 1 ? A[shared->dim_A_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? A[shared->dim_A_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Ax_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ax_2; ++j) {
        internal.n_Ax[i - 1 + shared->dim_n_Ax_1 * (j - 1)] = std::round(A[shared->dim_A_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_n_Ei_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ei_2; ++j) {
        internal.n_Ei[i - 1 + shared->dim_n_Ei_1 * (j - 1)] = ((i > 1 ? E[shared->dim_E_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? E[shared->dim_E_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Ex_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ex_2; ++j) {
        internal.n_Ex[i - 1 + shared->dim_n_Ex_1 * (j - 1)] = std::round(E[shared->dim_E_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_n_Fi_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Fi_2; ++j) {
        internal.n_Fi[i - 1 + shared->dim_n_Fi_1 * (j - 1)] = ((i > 1 ? F[shared->dim_F_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? F[shared->dim_F_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Fx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Fx_2; ++j) {
        internal.n_Fx[i - 1 + shared->dim_n_Fx_1 * (j - 1)] = std::round(F[shared->dim_F_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_n_Pi_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Pi_2; ++j) {
        internal.n_Pi[i - 1 + shared->dim_n_Pi_1 * (j - 1)] = ((i > 1 ? P[shared->dim_P_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? P[shared->dim_P_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Px_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Px_2; ++j) {
        internal.n_Px[i - 1 + shared->dim_n_Px_1 * (j - 1)] = std::round(P[shared->dim_P_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_n_Ri_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Ri_2; ++j) {
        internal.n_Ri[i - 1 + shared->dim_n_Ri_1 * (j - 1)] = ((i > 1 ? R[shared->dim_R_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? R[shared->dim_R_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Rx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Rx_2; ++j) {
        internal.n_Rx[i - 1 + shared->dim_n_Rx_1 * (j - 1)] = std::round(R[shared->dim_R_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    for (int i = 1; i <= shared->dim_n_Si_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Si_2; ++j) {
        internal.n_Si[i - 1 + shared->dim_n_Si_1 * (j - 1)] = ((i > 1 ? S[shared->dim_S_1 * (j - 1) + i - 1 - 1] : 0)) - ((i < shared->n_group ? S[shared->dim_S_1 * (j - 1) + i - 1] : 0));
      }
    }
    for (int i = 1; i <= shared->dim_n_Sx_1; ++i) {
      for (int j = 1; j <= shared->dim_n_Sx_2; ++j) {
        internal.n_Sx[i - 1 + shared->dim_n_Sx_1 * (j - 1)] = std::round(S[shared->dim_S_1 * (j - 1) + i - 1] * shared->omega[i - 1] * shared->dt);
      }
    }
    state_next[6] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? odin_sum1<real_type>(internal.n_xU.data(), 0, shared->dim_n_xU) : births_inc + odin_sum1<real_type>(internal.n_xU.data(), 0, shared->dim_n_xU)));
    state_next[11] = odin_sum1<real_type>(internal.weighted_phi_S.data(), 0, shared->dim_weighted_phi_S) / (real_type) odin_sum1<real_type>(N, 0, shared->dim_N);
    state_next[30] = ((shared->n_group == 16 ? internal.weighted_phi_S[0] / (real_type) N[0] : 0));
    state_next[31] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.weighted_phi_S.data(), 1, 3) / (real_type) odin_sum1<real_type>(N, 1, 3) : 0));
    state_next[32] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.weighted_phi_S.data(), 3, 9) / (real_type) odin_sum1<real_type>(N, 3, 9) : 0));
    state_next[33] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.weighted_phi_S.data(), 9, 13) / (real_type) odin_sum1<real_type>(N, 9, 13) : 0));
    state_next[34] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.weighted_phi_S.data(), 13, 15) / (real_type) odin_sum1<real_type>(N, 13, 15) : 0));
    state_next[35] = ((shared->n_group == 16 ? internal.weighted_phi_S[15] / (real_type) N[15] : 0));
    for (int i = 1; i <= shared->dim_dem_A_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_A_2; ++j) {
        internal.dem_A[i - 1 + shared->dim_dem_A_1 * (j - 1)] = std::round(internal.n_Ai[shared->dim_n_Ai_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Ax[shared->dim_n_Ax_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_dem_E_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_E_2; ++j) {
        internal.dem_E[i - 1 + shared->dim_dem_E_1 * (j - 1)] = std::round(internal.n_Ei[shared->dim_n_Ei_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Ex[shared->dim_n_Ex_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_dem_F_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_F_2; ++j) {
        internal.dem_F[i - 1 + shared->dim_dem_F_1 * (j - 1)] = std::round(internal.n_Fi[shared->dim_n_Fi_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Fx[shared->dim_n_Fx_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_dem_P_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_P_2; ++j) {
        internal.dem_P[i - 1 + shared->dim_dem_P_1 * (j - 1)] = std::round(internal.n_Pi[shared->dim_n_Pi_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Px[shared->dim_n_Px_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_dem_R_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_R_2; ++j) {
        internal.dem_R[i - 1 + shared->dim_dem_R_1 * (j - 1)] = std::round(internal.n_Ri[shared->dim_n_Ri_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Rx[shared->dim_n_Rx_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_dem_S_1; ++i) {
      for (int j = 1; j <= shared->dim_dem_S_2; ++j) {
        internal.dem_S[i - 1 + shared->dim_dem_S_1 * (j - 1)] = std::round(internal.n_Si[shared->dim_n_Si_1 * (j - 1) + i - 1] * shared->r_age * shared->dt) - internal.n_Sx[shared->dim_n_Sx_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_foi; ++i) {
      internal.foi[i - 1] = odin_sum2<real_type>(internal.lambda.data(), i - 1, i, 0, shared->dim_lambda_2, shared->dim_lambda_1);
    }
    for (int i = 1; i <= shared->dim_n_Nx; ++i) {
      internal.n_Nx[i - 1] = internal.n_Ux[i - 1] + odin_sum2<real_type>(internal.n_Ex.data(), i - 1, i, 0, shared->dim_n_Ex_2, shared->dim_n_Ex_1) + odin_sum2<real_type>(internal.n_Ax.data(), i - 1, i, 0, shared->dim_n_Ax_2, shared->dim_n_Ax_1) + odin_sum2<real_type>(internal.n_Sx.data(), i - 1, i, 0, shared->dim_n_Sx_2, shared->dim_n_Sx_1) + odin_sum2<real_type>(internal.n_Px.data(), i - 1, i, 0, shared->dim_n_Px_2, shared->dim_n_Px_1) + odin_sum2<real_type>(internal.n_Fx.data(), i - 1, i, 0, shared->dim_n_Fx_2, shared->dim_n_Fx_1) + odin_sum2<real_type>(internal.n_Rx.data(), i - 1, i, 0, shared->dim_n_Rx_2, shared->dim_n_Rx_1);
    }
    for (int i = 1; i <= shared->dim_dem_N; ++i) {
      internal.dem_N[i - 1] = internal.dem_U[i - 1] + odin_sum2<real_type>(internal.dem_E.data(), i - 1, i, 0, shared->dim_dem_E_2, shared->dim_dem_E_1) + odin_sum2<real_type>(internal.dem_A.data(), i - 1, i, 0, shared->dim_dem_A_2, shared->dim_dem_A_1) + odin_sum2<real_type>(internal.dem_S.data(), i - 1, i, 0, shared->dim_dem_S_2, shared->dim_dem_S_1) + odin_sum2<real_type>(internal.dem_P.data(), i - 1, i, 0, shared->dim_dem_P_2, shared->dim_dem_P_1) + odin_sum2<real_type>(internal.dem_F.data(), i - 1, i, 0, shared->dim_dem_F_2, shared->dim_dem_F_1) + odin_sum2<real_type>(internal.dem_R.data(), i - 1, i, 0, shared->dim_dem_R_2, shared->dim_dem_R_1);
    }
    for (int i = 1; i <= shared->dim_n_A_1; ++i) {
      for (int j = 1; j <= shared->dim_n_A_2; ++j) {
        internal.n_A[i - 1 + shared->dim_n_A_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, A[shared->dim_A_1 * (j - 1) + i - 1] + internal.dem_A[shared->dim_dem_A_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_A[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_E_1; ++i) {
      for (int j = 1; j <= shared->dim_n_E_2; ++j) {
        internal.n_E[i - 1 + shared->dim_n_E_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, E[shared->dim_E_1 * (j - 1) + i - 1] + internal.dem_E[shared->dim_dem_E_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_E[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_F_1; ++i) {
      for (int j = 1; j <= shared->dim_n_F_2; ++j) {
        internal.n_F[i - 1 + shared->dim_n_F_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, F[shared->dim_F_1 * (j - 1) + i - 1] + internal.dem_F[shared->dim_dem_F_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_F[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_P_1; ++i) {
      for (int j = 1; j <= shared->dim_n_P_2; ++j) {
        internal.n_P[i - 1 + shared->dim_n_P_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, P[shared->dim_P_1 * (j - 1) + i - 1] + internal.dem_P[shared->dim_dem_P_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_P[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_R_1; ++i) {
      for (int j = 1; j <= shared->dim_n_R_2; ++j) {
        internal.n_R[i - 1 + shared->dim_n_R_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, R[shared->dim_R_1 * (j - 1) + i - 1] + internal.dem_R[shared->dim_dem_R_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_R[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_n_S_1; ++i) {
      for (int j = 1; j <= shared->dim_n_S_2; ++j) {
        internal.n_S[i - 1 + shared->dim_n_S_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, S[shared->dim_S_1 * (j - 1) + i - 1] + internal.dem_S[shared->dim_dem_S_1 * (j - 1) + i - 1], 1 - std::exp(- shared->r_S[i - 1] * shared->dt));
      }
    }
    for (int i = 1; i <= shared->dim_r_I; ++i) {
      internal.r_I[i - 1] = internal.foi[i - 1] * shared->p_I;
    }
    for (int i = 1; i <= shared->dim_r_U; ++i) {
      internal.r_U[i - 1] = internal.foi[i - 1];
    }
    state_next[7] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? odin_sum1<real_type>(internal.n_Nx.data(), 0, shared->dim_n_Nx) : net_leavers_inc + odin_sum1<real_type>(internal.n_Nx.data(), 0, shared->dim_n_Nx)));
    for (int i = 1; i <= shared->dim_n_AR; ++i) {
      internal.n_AR[i - 1] = dust::random::binomial<real_type>(rng_state, internal.n_A[shared->dim_n_A_1 * (shared->k_A - 1) + i - 1], shared->p_R);
    }
    for (int i = 1; i <= shared->dim_n_EP; ++i) {
      internal.n_EP[i - 1] = dust::random::binomial<real_type>(rng_state, internal.n_E[shared->dim_n_E_1 * (shared->k_E - 1) + i - 1], shared->p_F);
    }
    for (int i = 1; i <= shared->dim_n_FR; ++i) {
      internal.n_FR[i - 1] = internal.n_F[shared->dim_n_F_1 * (shared->k_F - 1) + i - 1];
    }
    for (int i = 1; i <= shared->dim_n_I; ++i) {
      internal.n_I[i - 1] = dust::random::binomial<real_type>(rng_state, N[i - 1] + internal.dem_N[i - 1], 1 - std::exp(- internal.r_I[i - 1] * shared->dt));
    }
    for (int i = 1; i <= shared->dim_n_PF; ++i) {
      internal.n_PF[i - 1] = internal.n_P[shared->dim_n_P_1 * (shared->k_P - 1) + i - 1];
    }
    for (int i = 1; i <= shared->dim_n_RU; ++i) {
      internal.n_RU[i - 1] = internal.n_R[shared->dim_n_R_1 * (shared->k_R - 1) + i - 1];
    }
    for (int i = 1; i <= shared->dim_n_SR; ++i) {
      internal.n_SR[i - 1] = internal.n_S[shared->dim_n_S_1 * (shared->k_S - 1) + i - 1];
    }
    for (int i = 1; i <= shared->dim_n_U; ++i) {
      internal.n_U[i - 1] = dust::random::binomial<real_type>(rng_state, U[i - 1] + internal.dem_U[i - 1], 1 - std::exp(- internal.r_U[i - 1] * shared->dt));
    }
    for (int i = 1; i <= shared->dim_N; ++i) {
      state_next[shared->offset_variable_N + i - 1] = N[i - 1] + internal.dem_N[i - 1];
    }
    for (int i = 1; i <= shared->dim_gas_F_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_F_2; ++j) {
        internal.gas_F[i - 1 + shared->dim_gas_F_1 * (j - 1)] = ((j == 1 ? internal.n_PF[i - 1] : internal.n_F[shared->dim_n_F_1 * (j - 1 - 1) + i - 1])) - internal.n_F[shared->dim_n_F_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_gas_P_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_P_2; ++j) {
        internal.gas_P[i - 1 + shared->dim_gas_P_1 * (j - 1)] = ((j == 1 ? internal.n_EP[i - 1] : internal.n_P[shared->dim_n_P_1 * (j - 1 - 1) + i - 1])) - internal.n_P[shared->dim_n_P_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_gas_R_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_R_2; ++j) {
        internal.gas_R[i - 1 + shared->dim_gas_R_1 * (j - 1)] = ((j == 1 ? internal.n_AR[i - 1] + internal.n_SR[i - 1] + internal.n_FR[i - 1] : internal.n_R[shared->dim_n_R_1 * (j - 1 - 1) + i - 1])) - internal.n_R[shared->dim_n_R_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_AU; ++i) {
      internal.n_AU[i - 1] = internal.n_A[shared->dim_n_A_1 * (shared->k_A - 1) + i - 1] - internal.n_AR[i - 1];
    }
    for (int i = 1; i <= shared->dim_n_ES; ++i) {
      internal.n_ES[i - 1] = internal.n_E[shared->dim_n_E_1 * (shared->k_E - 1) + i - 1] - internal.n_EP[i - 1];
    }
    for (int i = 1; i <= shared->dim_n_UE; ++i) {
      internal.n_UE[i - 1] = dust::random::binomial<real_type>(rng_state, internal.n_U[i - 1], shared->p_S);
    }
    for (int i = 1; i <= shared->dim_scarlet_fever_inc_by_group; ++i) {
      internal.scarlet_fever_inc_by_group[i - 1] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? internal.n_PF[i - 1] : internal.scarlet_fever_inc_by_group[i - 1] + internal.n_PF[i - 1]));
    }
    state_next[5] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? odin_sum1<real_type>(internal.n_I.data(), 0, shared->dim_n_I) : igas_inc + odin_sum1<real_type>(internal.n_I.data(), 0, shared->dim_n_I)));
    for (int i = 1; i <= shared->dim_gas_E_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_E_2; ++j) {
        internal.gas_E[i - 1 + shared->dim_gas_E_1 * (j - 1)] = ((j == 1 ? internal.n_UE[i - 1] : internal.n_E[shared->dim_n_E_1 * (j - 1 - 1) + i - 1])) - internal.n_E[shared->dim_n_E_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_gas_S_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_S_2; ++j) {
        internal.gas_S[i - 1 + shared->dim_gas_S_1 * (j - 1)] = ((j == 1 ? internal.n_ES[i - 1] : internal.n_S[shared->dim_n_S_1 * (j - 1 - 1) + i - 1])) - internal.n_S[shared->dim_n_S_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_gas_U; ++i) {
      internal.gas_U[i - 1] = internal.n_AU[i - 1] + internal.n_RU[i - 1] - internal.n_U[i - 1];
    }
    for (int i = 1; i <= shared->dim_gas_pharyngitis_inc_by_group; ++i) {
      internal.gas_pharyngitis_inc_by_group[i - 1] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? internal.n_ES[i - 1] : internal.gas_pharyngitis_inc_by_group[i - 1] + internal.n_ES[i - 1]));
    }
    for (int i = 1; i <= shared->dim_n_UA; ++i) {
      internal.n_UA[i - 1] = internal.n_U[i - 1] - internal.n_UE[i - 1];
    }
    for (int i = 1; i <= shared->dim_F_1; ++i) {
      for (int j = 1; j <= shared->dim_F_2; ++j) {
        state_next[shared->offset_variable_F + i - 1 + shared->dim_F_1 * (j - 1)] = F[shared->dim_F_1 * (j - 1) + i - 1] + internal.dem_F[shared->dim_dem_F_1 * (j - 1) + i - 1] + internal.gas_F[shared->dim_gas_F_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_P_1; ++i) {
      for (int j = 1; j <= shared->dim_P_2; ++j) {
        state_next[shared->offset_variable_P + i - 1 + shared->dim_P_1 * (j - 1)] = P[shared->dim_P_1 * (j - 1) + i - 1] + internal.dem_P[shared->dim_dem_P_1 * (j - 1) + i - 1] + internal.gas_P[shared->dim_gas_P_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_R_1; ++i) {
      for (int j = 1; j <= shared->dim_R_2; ++j) {
        state_next[shared->offset_variable_R + i - 1 + shared->dim_R_1 * (j - 1)] = R[shared->dim_R_1 * (j - 1) + i - 1] + internal.dem_R[shared->dim_dem_R_1 * (j - 1) + i - 1] + internal.gas_R[shared->dim_gas_R_1 * (j - 1) + i - 1];
      }
    }
    state_next[10] = odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 0, shared->dim_scarlet_fever_inc_by_group) / (real_type) odin_sum1<real_type>(internal.w.data(), 0, shared->dim_w);
    state_next[18] = ((shared->n_group == 16 ? internal.scarlet_fever_inc_by_group[0] / (real_type) internal.w[0] : 0));
    state_next[19] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 1, 3) / (real_type) odin_sum1<real_type>(internal.w.data(), 1, 3) : 0));
    state_next[20] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 3, 9) / (real_type) odin_sum1<real_type>(internal.w.data(), 3, 9) : 0));
    state_next[21] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 9, 13) / (real_type) odin_sum1<real_type>(internal.w.data(), 9, 13) : 0));
    state_next[22] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 13, 15) / (real_type) odin_sum1<real_type>(internal.w.data(), 13, 15) : 0));
    state_next[23] = ((shared->n_group == 16 ? internal.scarlet_fever_inc_by_group[15] / (real_type) internal.w[15] : 0));
    state_next[4] = std::round(odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 0, shared->dim_scarlet_fever_inc_by_group) * q_F_t);
    state_next[3] = odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 0, shared->dim_scarlet_fever_inc_by_group);
    state_next[24] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 0, 1) : 0));
    state_next[25] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 1, 3) : 0));
    state_next[26] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 3, 9) : 0));
    state_next[27] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 9, 13) : 0));
    state_next[28] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.scarlet_fever_inc_by_group.data(), 13, 15) : 0));
    state_next[29] = ((shared->n_group == 16 ? internal.scarlet_fever_inc_by_group[15] : 0));
    for (int i = 1; i <= shared->dim_gas_A_1; ++i) {
      for (int j = 1; j <= shared->dim_gas_A_2; ++j) {
        internal.gas_A[i - 1 + shared->dim_gas_A_1 * (j - 1)] = ((j == 1 ? internal.n_UA[i - 1] : internal.n_A[shared->dim_n_A_1 * (j - 1 - 1) + i - 1])) - internal.n_A[shared->dim_n_A_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_E_1; ++i) {
      for (int j = 1; j <= shared->dim_E_2; ++j) {
        state_next[shared->offset_variable_E + i - 1 + shared->dim_E_1 * (j - 1)] = E[shared->dim_E_1 * (j - 1) + i - 1] + internal.dem_E[shared->dim_dem_E_1 * (j - 1) + i - 1] + internal.gas_E[shared->dim_gas_E_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_S_1; ++i) {
      for (int j = 1; j <= shared->dim_S_2; ++j) {
        state_next[shared->offset_variable_S + i - 1 + shared->dim_S_1 * (j - 1)] = S[shared->dim_S_1 * (j - 1) + i - 1] + internal.dem_S[shared->dim_dem_S_1 * (j - 1) + i - 1] + internal.gas_S[shared->dim_gas_S_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_U; ++i) {
      state_next[36 + i - 1] = U[i - 1] + internal.dem_U[i - 1] + internal.gas_U[i - 1];
    }
    state_next[9] = odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 0, shared->dim_gas_pharyngitis_inc_by_group) * shared->p_T / (real_type) odin_sum1<real_type>(internal.w.data(), 0, shared->dim_w);
    state_next[12] = ((shared->n_group == 16 ? internal.gas_pharyngitis_inc_by_group[0] * shared->p_T / (real_type) internal.w[0] : 0));
    state_next[13] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 1, 3) * shared->p_T / (real_type) odin_sum1<real_type>(internal.w.data(), 1, 3) : 0));
    state_next[14] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 3, 9) * shared->p_T / (real_type) odin_sum1<real_type>(internal.w.data(), 3, 9) : 0));
    state_next[15] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 9, 13) * shared->p_T / (real_type) odin_sum1<real_type>(internal.w.data(), 9, 13) : 0));
    state_next[16] = ((shared->n_group == 16 ? odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 13, 15) * shared->p_T / (real_type) odin_sum1<real_type>(internal.w.data(), 13, 15) : 0));
    state_next[17] = ((shared->n_group == 16 ? internal.gas_pharyngitis_inc_by_group[15] * shared->p_T / (real_type) internal.w[15] : 0));
    state_next[2] = odin_sum1<real_type>(internal.gas_pharyngitis_inc_by_group.data(), 0, shared->dim_gas_pharyngitis_inc_by_group);
    state_next[1] = ((fmodr<real_type>(step, shared->steps_per_week) == 0 ? odin_sum1<real_type>(internal.n_UE.data(), 0, shared->dim_n_UE) + odin_sum1<real_type>(internal.n_UA.data(), 0, shared->dim_n_UA) : infections_inc + odin_sum1<real_type>(internal.n_UE.data(), 0, shared->dim_n_UE) + odin_sum1<real_type>(internal.n_UA.data(), 0, shared->dim_n_UA)));
    for (int i = 1; i <= shared->dim_A_1; ++i) {
      for (int j = 1; j <= shared->dim_A_2; ++j) {
        state_next[shared->offset_variable_A + i - 1 + shared->dim_A_1 * (j - 1)] = A[shared->dim_A_1 * (j - 1) + i - 1] + internal.dem_A[shared->dim_dem_A_1 * (j - 1) + i - 1] + internal.gas_A[shared->dim_gas_A_1 * (j - 1) + i - 1];
      }
    }
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<model> dust_pars<model>(cpp11::list user) {
  using real_type = typename model::real_type;
  auto shared = std::make_shared<model::shared_type>();
  model::internal_type internal;
  shared->initial_beta_t = 0;
  shared->initial_births_inc = 0;
  shared->initial_daily_gas_pharyngitis_rate = 0;
  shared->initial_daily_gas_pharyngitis_rate_04 = 0;
  shared->initial_daily_gas_pharyngitis_rate_05_14 = 0;
  shared->initial_daily_gas_pharyngitis_rate_15_44 = 0;
  shared->initial_daily_gas_pharyngitis_rate_45_64 = 0;
  shared->initial_daily_gas_pharyngitis_rate_65_74 = 0;
  shared->initial_daily_gas_pharyngitis_rate_75 = 0;
  shared->initial_daily_scarlet_fever_rate = 0;
  shared->initial_daily_scarlet_fever_rate_04 = 0;
  shared->initial_daily_scarlet_fever_rate_05_14 = 0;
  shared->initial_daily_scarlet_fever_rate_15_44 = 0;
  shared->initial_daily_scarlet_fever_rate_45_64 = 0;
  shared->initial_daily_scarlet_fever_rate_65_74 = 0;
  shared->initial_daily_scarlet_fever_rate_75 = 0;
  shared->initial_etiologic_fraction = 0;
  shared->initial_etiologic_fraction_04 = 0;
  shared->initial_etiologic_fraction_05_14 = 0;
  shared->initial_etiologic_fraction_15_44 = 0;
  shared->initial_etiologic_fraction_45_64 = 0;
  shared->initial_etiologic_fraction_65_74 = 0;
  shared->initial_etiologic_fraction_75 = 0;
  shared->initial_gas_pharyngitis_inc = 0;
  shared->initial_igas_inc = 0;
  shared->initial_infections_inc = 0;
  shared->initial_net_leavers_inc = 0;
  shared->initial_scarlet_fever_cases = 0;
  shared->initial_scarlet_fever_inc = 0;
  shared->initial_scarlet_fever_inc_04 = 0;
  shared->initial_scarlet_fever_inc_05_14 = 0;
  shared->initial_scarlet_fever_inc_15_44 = 0;
  shared->initial_scarlet_fever_inc_45_64 = 0;
  shared->initial_scarlet_fever_inc_65_74 = 0;
  shared->initial_scarlet_fever_inc_75 = 0;
  shared->initial_time = 0;
  shared->pi = 3.14159265358979;
  shared->steps_per_week = 7;
  shared->dt = 1 / (real_type) shared->steps_per_week;
  shared->beta = NA_REAL;
  shared->delta_A = NA_REAL;
  shared->delta_E = NA_REAL;
  shared->delta_F = NA_REAL;
  shared->delta_P = NA_REAL;
  shared->delta_R = NA_REAL;
  shared->delta_S = NA_REAL;
  shared->k_A = NA_INTEGER;
  shared->k_E = NA_INTEGER;
  shared->k_F = NA_INTEGER;
  shared->k_P = NA_INTEGER;
  shared->k_R = NA_INTEGER;
  shared->k_S = NA_INTEGER;
  shared->p_F = NA_REAL;
  shared->p_I = NA_REAL;
  shared->p_R = NA_REAL;
  shared->p_S = NA_REAL;
  shared->p_T = NA_REAL;
  shared->sigma = NA_REAL;
  shared->t_s = NA_REAL;
  shared->theta_A = NA_REAL;
  shared->n_group = 1;
  shared->r_age = 0;
  shared->t0 = 0;
  std::array <int, 1> dim_alpha;
  shared->alpha = user_get_array_variable<real_type, 1>(user, "alpha", shared->alpha, dim_alpha, NA_REAL, NA_REAL);
  shared->dim_alpha = shared->alpha.size();
  shared->beta = user_get_scalar<real_type>(user, "beta", shared->beta, NA_REAL, NA_REAL);
  shared->delta_A = user_get_scalar<real_type>(user, "delta_A", shared->delta_A, NA_REAL, NA_REAL);
  shared->delta_E = user_get_scalar<real_type>(user, "delta_E", shared->delta_E, NA_REAL, NA_REAL);
  shared->delta_F = user_get_scalar<real_type>(user, "delta_F", shared->delta_F, NA_REAL, NA_REAL);
  shared->delta_P = user_get_scalar<real_type>(user, "delta_P", shared->delta_P, NA_REAL, NA_REAL);
  shared->delta_R = user_get_scalar<real_type>(user, "delta_R", shared->delta_R, NA_REAL, NA_REAL);
  shared->delta_S = user_get_scalar<real_type>(user, "delta_S", shared->delta_S, NA_REAL, NA_REAL);
  shared->k_A = user_get_scalar<int>(user, "k_A", shared->k_A, NA_REAL, NA_REAL);
  shared->k_E = user_get_scalar<int>(user, "k_E", shared->k_E, NA_REAL, NA_REAL);
  shared->k_F = user_get_scalar<int>(user, "k_F", shared->k_F, NA_REAL, NA_REAL);
  shared->k_P = user_get_scalar<int>(user, "k_P", shared->k_P, NA_REAL, NA_REAL);
  shared->k_R = user_get_scalar<int>(user, "k_R", shared->k_R, NA_REAL, NA_REAL);
  shared->k_S = user_get_scalar<int>(user, "k_S", shared->k_S, NA_REAL, NA_REAL);
  shared->n_group = user_get_scalar<int>(user, "n_group", shared->n_group, NA_REAL, NA_REAL);
  shared->p_F = user_get_scalar<real_type>(user, "p_F", shared->p_F, NA_REAL, NA_REAL);
  shared->p_I = user_get_scalar<real_type>(user, "p_I", shared->p_I, NA_REAL, NA_REAL);
  shared->p_R = user_get_scalar<real_type>(user, "p_R", shared->p_R, NA_REAL, NA_REAL);
  shared->p_S = user_get_scalar<real_type>(user, "p_S", shared->p_S, NA_REAL, NA_REAL);
  shared->p_T = user_get_scalar<real_type>(user, "p_T", shared->p_T, NA_REAL, NA_REAL);
  std::array <int, 1> dim_q_F;
  shared->q_F = user_get_array_variable<real_type, 1>(user, "q_F", shared->q_F, dim_q_F, NA_REAL, NA_REAL);
  shared->dim_q_F = shared->q_F.size();
  shared->r_age = user_get_scalar<real_type>(user, "r_age", shared->r_age, NA_REAL, NA_REAL);
  shared->sigma = user_get_scalar<real_type>(user, "sigma", shared->sigma, NA_REAL, NA_REAL);
  shared->t0 = user_get_scalar<real_type>(user, "t0", shared->t0, NA_REAL, NA_REAL);
  shared->t_s = user_get_scalar<real_type>(user, "t_s", shared->t_s, NA_REAL, NA_REAL);
  shared->theta_A = user_get_scalar<real_type>(user, "theta_A", shared->theta_A, NA_REAL, NA_REAL);
  shared->dim_A0_1 = shared->n_group;
  shared->dim_A0_2 = shared->k_A;
  shared->dim_A_1 = shared->n_group;
  shared->dim_A_2 = shared->k_A;
  shared->dim_E0_1 = shared->n_group;
  shared->dim_E0_2 = shared->k_E;
  shared->dim_E_1 = shared->n_group;
  shared->dim_E_2 = shared->k_E;
  shared->dim_F0_1 = shared->n_group;
  shared->dim_F0_2 = shared->k_F;
  shared->dim_F_1 = shared->n_group;
  shared->dim_F_2 = shared->k_F;
  shared->dim_N = shared->n_group;
  shared->dim_P0_1 = shared->n_group;
  shared->dim_P0_2 = shared->k_P;
  shared->dim_P_1 = shared->n_group;
  shared->dim_P_2 = shared->k_P;
  shared->dim_R0_1 = shared->n_group;
  shared->dim_R0_2 = shared->k_R;
  shared->dim_R_1 = shared->n_group;
  shared->dim_R_2 = shared->k_R;
  shared->dim_S0_1 = shared->n_group;
  shared->dim_S0_2 = shared->k_S;
  shared->dim_S_1 = shared->n_group;
  shared->dim_S_2 = shared->k_S;
  shared->dim_U = shared->n_group;
  shared->dim_U0 = shared->n_group;
  shared->dim_dem_A_1 = shared->n_group;
  shared->dim_dem_A_2 = shared->k_A;
  shared->dim_dem_E_1 = shared->n_group;
  shared->dim_dem_E_2 = shared->k_E;
  shared->dim_dem_F_1 = shared->n_group;
  shared->dim_dem_F_2 = shared->k_F;
  shared->dim_dem_N = shared->n_group;
  shared->dim_dem_P_1 = shared->n_group;
  shared->dim_dem_P_2 = shared->k_P;
  shared->dim_dem_R_1 = shared->n_group;
  shared->dim_dem_R_2 = shared->k_R;
  shared->dim_dem_S_1 = shared->n_group;
  shared->dim_dem_S_2 = shared->k_S;
  shared->dim_dem_U = shared->n_group;
  shared->dim_foi = shared->n_group;
  shared->dim_gas_A_1 = shared->n_group;
  shared->dim_gas_A_2 = shared->k_A;
  shared->dim_gas_E_1 = shared->n_group;
  shared->dim_gas_E_2 = shared->k_E;
  shared->dim_gas_F_1 = shared->n_group;
  shared->dim_gas_F_2 = shared->k_F;
  shared->dim_gas_P_1 = shared->n_group;
  shared->dim_gas_P_2 = shared->k_P;
  shared->dim_gas_R_1 = shared->n_group;
  shared->dim_gas_R_2 = shared->k_R;
  shared->dim_gas_S_1 = shared->n_group;
  shared->dim_gas_S_2 = shared->k_S;
  shared->dim_gas_U = shared->n_group;
  shared->dim_gas_pharyngitis_inc_by_group = shared->n_group;
  shared->dim_lambda_1 = shared->n_group;
  shared->dim_lambda_2 = shared->n_group;
  shared->dim_m_1 = shared->n_group;
  shared->dim_m_2 = shared->n_group;
  shared->dim_n_AR = shared->n_group;
  shared->dim_n_AU = shared->n_group;
  shared->dim_n_A_1 = shared->n_group;
  shared->dim_n_A_2 = shared->k_A;
  shared->dim_n_Ai_1 = shared->n_group;
  shared->dim_n_Ai_2 = shared->k_A;
  shared->dim_n_Ax_1 = shared->n_group;
  shared->dim_n_Ax_2 = shared->k_A;
  shared->dim_n_EP = shared->n_group;
  shared->dim_n_ES = shared->n_group;
  shared->dim_n_E_1 = shared->n_group;
  shared->dim_n_E_2 = shared->k_E;
  shared->dim_n_Ei_1 = shared->n_group;
  shared->dim_n_Ei_2 = shared->k_E;
  shared->dim_n_Ex_1 = shared->n_group;
  shared->dim_n_Ex_2 = shared->k_E;
  shared->dim_n_FR = shared->n_group;
  shared->dim_n_F_1 = shared->n_group;
  shared->dim_n_F_2 = shared->k_F;
  shared->dim_n_Fi_1 = shared->n_group;
  shared->dim_n_Fi_2 = shared->k_F;
  shared->dim_n_Fx_1 = shared->n_group;
  shared->dim_n_Fx_2 = shared->k_F;
  shared->dim_n_I = shared->n_group;
  shared->dim_n_Nx = shared->n_group;
  shared->dim_n_PF = shared->n_group;
  shared->dim_n_P_1 = shared->n_group;
  shared->dim_n_P_2 = shared->k_P;
  shared->dim_n_Pi_1 = shared->n_group;
  shared->dim_n_Pi_2 = shared->k_P;
  shared->dim_n_Px_1 = shared->n_group;
  shared->dim_n_Px_2 = shared->k_P;
  shared->dim_n_RU = shared->n_group;
  shared->dim_n_R_1 = shared->n_group;
  shared->dim_n_R_2 = shared->k_R;
  shared->dim_n_Ri_1 = shared->n_group;
  shared->dim_n_Ri_2 = shared->k_R;
  shared->dim_n_Rx_1 = shared->n_group;
  shared->dim_n_Rx_2 = shared->k_R;
  shared->dim_n_SR = shared->n_group;
  shared->dim_n_S_1 = shared->n_group;
  shared->dim_n_S_2 = shared->k_S;
  shared->dim_n_Si_1 = shared->n_group;
  shared->dim_n_Si_2 = shared->k_S;
  shared->dim_n_Sx_1 = shared->n_group;
  shared->dim_n_Sx_2 = shared->k_S;
  shared->dim_n_U = shared->n_group;
  shared->dim_n_UA = shared->n_group;
  shared->dim_n_UE = shared->n_group;
  shared->dim_n_Ui = shared->n_group;
  shared->dim_n_Ux = shared->n_group;
  shared->dim_n_xU = shared->n_group;
  shared->dim_omega = shared->n_group;
  shared->dim_phi_S = shared->n_group;
  shared->dim_prev_A = shared->n_group;
  shared->dim_prev_R = shared->n_group;
  shared->dim_r_A = shared->n_group;
  shared->dim_r_E = shared->n_group;
  shared->dim_r_F = shared->n_group;
  shared->dim_r_I = shared->n_group;
  shared->dim_r_P = shared->n_group;
  shared->dim_r_R = shared->n_group;
  shared->dim_r_S = shared->n_group;
  shared->dim_r_U = shared->n_group;
  shared->dim_scarlet_fever_inc_by_group = shared->n_group;
  shared->dim_w = shared->n_group;
  shared->dim_weighted_phi_S = shared->n_group;
  shared->U0 = user_get_array_fixed<real_type, 1>(user, "U0", shared->U0, {shared->dim_U0}, NA_REAL, NA_REAL);
  internal.dem_N = std::vector<real_type>(shared->dim_dem_N);
  internal.dem_U = std::vector<real_type>(shared->dim_dem_U);
  internal.foi = std::vector<real_type>(shared->dim_foi);
  internal.gas_U = std::vector<real_type>(shared->dim_gas_U);
  internal.gas_pharyngitis_inc_by_group = std::vector<real_type>(shared->dim_gas_pharyngitis_inc_by_group);
  shared->initial_N = std::vector<real_type>(shared->dim_N);
  shared->initial_U = std::vector<real_type>(shared->dim_U);
  shared->initial_prev_A = std::vector<real_type>(shared->dim_prev_A);
  shared->initial_prev_R = std::vector<real_type>(shared->dim_prev_R);
  internal.n_AR = std::vector<real_type>(shared->dim_n_AR);
  internal.n_AU = std::vector<real_type>(shared->dim_n_AU);
  internal.n_EP = std::vector<real_type>(shared->dim_n_EP);
  internal.n_ES = std::vector<real_type>(shared->dim_n_ES);
  internal.n_FR = std::vector<real_type>(shared->dim_n_FR);
  internal.n_I = std::vector<real_type>(shared->dim_n_I);
  internal.n_Nx = std::vector<real_type>(shared->dim_n_Nx);
  internal.n_PF = std::vector<real_type>(shared->dim_n_PF);
  internal.n_RU = std::vector<real_type>(shared->dim_n_RU);
  internal.n_SR = std::vector<real_type>(shared->dim_n_SR);
  internal.n_U = std::vector<real_type>(shared->dim_n_U);
  internal.n_UA = std::vector<real_type>(shared->dim_n_UA);
  internal.n_UE = std::vector<real_type>(shared->dim_n_UE);
  internal.n_Ui = std::vector<real_type>(shared->dim_n_Ui);
  internal.n_Ux = std::vector<real_type>(shared->dim_n_Ux);
  internal.n_xU = std::vector<real_type>(shared->dim_n_xU);
  shared->r_A = std::vector<real_type>(shared->dim_r_A);
  shared->r_E = std::vector<real_type>(shared->dim_r_E);
  shared->r_F = std::vector<real_type>(shared->dim_r_F);
  internal.r_I = std::vector<real_type>(shared->dim_r_I);
  shared->r_P = std::vector<real_type>(shared->dim_r_P);
  shared->r_R = std::vector<real_type>(shared->dim_r_R);
  shared->r_S = std::vector<real_type>(shared->dim_r_S);
  internal.r_U = std::vector<real_type>(shared->dim_r_U);
  internal.scarlet_fever_inc_by_group = std::vector<real_type>(shared->dim_scarlet_fever_inc_by_group);
  internal.w = std::vector<real_type>(shared->dim_w);
  internal.weighted_phi_S = std::vector<real_type>(shared->dim_weighted_phi_S);
  shared->dim_A = shared->dim_A_1 * shared->dim_A_2;
  shared->dim_A0 = shared->dim_A0_1 * shared->dim_A0_2;
  shared->dim_E = shared->dim_E_1 * shared->dim_E_2;
  shared->dim_E0 = shared->dim_E0_1 * shared->dim_E0_2;
  shared->dim_F = shared->dim_F_1 * shared->dim_F_2;
  shared->dim_F0 = shared->dim_F0_1 * shared->dim_F0_2;
  shared->dim_P = shared->dim_P_1 * shared->dim_P_2;
  shared->dim_P0 = shared->dim_P0_1 * shared->dim_P0_2;
  shared->dim_R = shared->dim_R_1 * shared->dim_R_2;
  shared->dim_R0 = shared->dim_R0_1 * shared->dim_R0_2;
  shared->dim_S = shared->dim_S_1 * shared->dim_S_2;
  shared->dim_S0 = shared->dim_S0_1 * shared->dim_S0_2;
  shared->dim_dem_A = shared->dim_dem_A_1 * shared->dim_dem_A_2;
  shared->dim_dem_E = shared->dim_dem_E_1 * shared->dim_dem_E_2;
  shared->dim_dem_F = shared->dim_dem_F_1 * shared->dim_dem_F_2;
  shared->dim_dem_P = shared->dim_dem_P_1 * shared->dim_dem_P_2;
  shared->dim_dem_R = shared->dim_dem_R_1 * shared->dim_dem_R_2;
  shared->dim_dem_S = shared->dim_dem_S_1 * shared->dim_dem_S_2;
  shared->dim_gas_A = shared->dim_gas_A_1 * shared->dim_gas_A_2;
  shared->dim_gas_E = shared->dim_gas_E_1 * shared->dim_gas_E_2;
  shared->dim_gas_F = shared->dim_gas_F_1 * shared->dim_gas_F_2;
  shared->dim_gas_P = shared->dim_gas_P_1 * shared->dim_gas_P_2;
  shared->dim_gas_R = shared->dim_gas_R_1 * shared->dim_gas_R_2;
  shared->dim_gas_S = shared->dim_gas_S_1 * shared->dim_gas_S_2;
  shared->dim_lambda = shared->dim_lambda_1 * shared->dim_lambda_2;
  shared->dim_m = shared->dim_m_1 * shared->dim_m_2;
  shared->dim_n_A = shared->dim_n_A_1 * shared->dim_n_A_2;
  shared->dim_n_Ai = shared->dim_n_Ai_1 * shared->dim_n_Ai_2;
  shared->dim_n_Ax = shared->dim_n_Ax_1 * shared->dim_n_Ax_2;
  shared->dim_n_E = shared->dim_n_E_1 * shared->dim_n_E_2;
  shared->dim_n_Ei = shared->dim_n_Ei_1 * shared->dim_n_Ei_2;
  shared->dim_n_Ex = shared->dim_n_Ex_1 * shared->dim_n_Ex_2;
  shared->dim_n_F = shared->dim_n_F_1 * shared->dim_n_F_2;
  shared->dim_n_Fi = shared->dim_n_Fi_1 * shared->dim_n_Fi_2;
  shared->dim_n_Fx = shared->dim_n_Fx_1 * shared->dim_n_Fx_2;
  shared->dim_n_P = shared->dim_n_P_1 * shared->dim_n_P_2;
  shared->dim_n_Pi = shared->dim_n_Pi_1 * shared->dim_n_Pi_2;
  shared->dim_n_Px = shared->dim_n_Px_1 * shared->dim_n_Px_2;
  shared->dim_n_R = shared->dim_n_R_1 * shared->dim_n_R_2;
  shared->dim_n_Ri = shared->dim_n_Ri_1 * shared->dim_n_Ri_2;
  shared->dim_n_Rx = shared->dim_n_Rx_1 * shared->dim_n_Rx_2;
  shared->dim_n_S = shared->dim_n_S_1 * shared->dim_n_S_2;
  shared->dim_n_Si = shared->dim_n_Si_1 * shared->dim_n_Si_2;
  shared->dim_n_Sx = shared->dim_n_Sx_1 * shared->dim_n_Sx_2;
  shared->offset_variable_A = shared->dim_N + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  shared->offset_variable_N = shared->dim_U + 36;
  shared->offset_variable_prev_A = shared->dim_N + shared->dim_U + 36;
  shared->offset_variable_prev_R = shared->dim_N + shared->dim_U + shared->dim_prev_A + 36;
  shared->omega = user_get_array_fixed<real_type, 1>(user, "omega", shared->omega, {shared->dim_omega}, NA_REAL, NA_REAL);
  shared->phi_S = user_get_array_fixed<real_type, 1>(user, "phi_S", shared->phi_S, {shared->dim_phi_S}, NA_REAL, NA_REAL);
  shared->A0 = user_get_array_fixed<real_type, 2>(user, "A0", shared->A0, {shared->dim_A0_1, shared->dim_A0_2}, NA_REAL, NA_REAL);
  shared->E0 = user_get_array_fixed<real_type, 2>(user, "E0", shared->E0, {shared->dim_E0_1, shared->dim_E0_2}, NA_REAL, NA_REAL);
  shared->F0 = user_get_array_fixed<real_type, 2>(user, "F0", shared->F0, {shared->dim_F0_1, shared->dim_F0_2}, NA_REAL, NA_REAL);
  shared->P0 = user_get_array_fixed<real_type, 2>(user, "P0", shared->P0, {shared->dim_P0_1, shared->dim_P0_2}, NA_REAL, NA_REAL);
  shared->R0 = user_get_array_fixed<real_type, 2>(user, "R0", shared->R0, {shared->dim_R0_1, shared->dim_R0_2}, NA_REAL, NA_REAL);
  shared->S0 = user_get_array_fixed<real_type, 2>(user, "S0", shared->S0, {shared->dim_S0_1, shared->dim_S0_2}, NA_REAL, NA_REAL);
  internal.dem_A = std::vector<real_type>(shared->dim_dem_A);
  internal.dem_E = std::vector<real_type>(shared->dim_dem_E);
  internal.dem_F = std::vector<real_type>(shared->dim_dem_F);
  internal.dem_P = std::vector<real_type>(shared->dim_dem_P);
  internal.dem_R = std::vector<real_type>(shared->dim_dem_R);
  internal.dem_S = std::vector<real_type>(shared->dim_dem_S);
  internal.gas_A = std::vector<real_type>(shared->dim_gas_A);
  internal.gas_E = std::vector<real_type>(shared->dim_gas_E);
  internal.gas_F = std::vector<real_type>(shared->dim_gas_F);
  internal.gas_P = std::vector<real_type>(shared->dim_gas_P);
  internal.gas_R = std::vector<real_type>(shared->dim_gas_R);
  internal.gas_S = std::vector<real_type>(shared->dim_gas_S);
  shared->initial_A = std::vector<real_type>(shared->dim_A);
  shared->initial_E = std::vector<real_type>(shared->dim_E);
  shared->initial_F = std::vector<real_type>(shared->dim_F);
  shared->initial_P = std::vector<real_type>(shared->dim_P);
  shared->initial_R = std::vector<real_type>(shared->dim_R);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  internal.lambda = std::vector<real_type>(shared->dim_lambda);
  internal.n_A = std::vector<real_type>(shared->dim_n_A);
  internal.n_Ai = std::vector<real_type>(shared->dim_n_Ai);
  internal.n_Ax = std::vector<real_type>(shared->dim_n_Ax);
  internal.n_E = std::vector<real_type>(shared->dim_n_E);
  internal.n_Ei = std::vector<real_type>(shared->dim_n_Ei);
  internal.n_Ex = std::vector<real_type>(shared->dim_n_Ex);
  internal.n_F = std::vector<real_type>(shared->dim_n_F);
  internal.n_Fi = std::vector<real_type>(shared->dim_n_Fi);
  internal.n_Fx = std::vector<real_type>(shared->dim_n_Fx);
  internal.n_P = std::vector<real_type>(shared->dim_n_P);
  internal.n_Pi = std::vector<real_type>(shared->dim_n_Pi);
  internal.n_Px = std::vector<real_type>(shared->dim_n_Px);
  internal.n_R = std::vector<real_type>(shared->dim_n_R);
  internal.n_Ri = std::vector<real_type>(shared->dim_n_Ri);
  internal.n_Rx = std::vector<real_type>(shared->dim_n_Rx);
  internal.n_S = std::vector<real_type>(shared->dim_n_S);
  internal.n_Si = std::vector<real_type>(shared->dim_n_Si);
  internal.n_Sx = std::vector<real_type>(shared->dim_n_Sx);
  for (int i = 1; i <= shared->dim_U; ++i) {
    shared->initial_U[i - 1] = shared->U0[i - 1];
  }
  shared->m = user_get_array_fixed<real_type, 2>(user, "m", shared->m, {shared->dim_m_1, shared->dim_m_2}, NA_REAL, NA_REAL);
  shared->offset_variable_E = shared->dim_A + shared->dim_N + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  shared->offset_variable_F = shared->dim_A + shared->dim_E + shared->dim_N + shared->dim_P + shared->dim_S + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  shared->offset_variable_P = shared->dim_A + shared->dim_E + shared->dim_N + shared->dim_S + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  shared->offset_variable_R = shared->dim_A + shared->dim_E + shared->dim_F + shared->dim_N + shared->dim_P + shared->dim_S + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  shared->offset_variable_S = shared->dim_A + shared->dim_E + shared->dim_N + shared->dim_U + shared->dim_prev_A + shared->dim_prev_R + 36;
  for (int i = 1; i <= shared->dim_r_A; ++i) {
    shared->r_A[i - 1] = shared->k_A / (real_type) shared->delta_A;
  }
  for (int i = 1; i <= shared->dim_r_E; ++i) {
    shared->r_E[i - 1] = shared->k_E / (real_type) shared->delta_E;
  }
  for (int i = 1; i <= shared->dim_r_F; ++i) {
    shared->r_F[i - 1] = shared->k_F / (real_type) shared->delta_F;
  }
  for (int i = 1; i <= shared->dim_r_P; ++i) {
    shared->r_P[i - 1] = shared->k_P / (real_type) shared->delta_P;
  }
  for (int i = 1; i <= shared->dim_r_R; ++i) {
    shared->r_R[i - 1] = shared->k_R / (real_type) shared->delta_R;
  }
  for (int i = 1; i <= shared->dim_r_S; ++i) {
    shared->r_S[i - 1] = shared->k_S / (real_type) shared->delta_S;
  }
  for (int i = 1; i <= shared->dim_A_1; ++i) {
    for (int j = 1; j <= shared->dim_A_2; ++j) {
      shared->initial_A[i - 1 + shared->dim_A_1 * (j - 1)] = shared->A0[shared->dim_A0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_E_1; ++i) {
    for (int j = 1; j <= shared->dim_E_2; ++j) {
      shared->initial_E[i - 1 + shared->dim_E_1 * (j - 1)] = shared->E0[shared->dim_E0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_F_1; ++i) {
    for (int j = 1; j <= shared->dim_F_2; ++j) {
      shared->initial_F[i - 1 + shared->dim_F_1 * (j - 1)] = shared->F0[shared->dim_F0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_N; ++i) {
    shared->initial_N[i - 1] = shared->U0[i - 1] + odin_sum2<real_type>(shared->A0.data(), i - 1, i, 0, shared->dim_A0_2, shared->dim_A0_1) + odin_sum2<real_type>(shared->E0.data(), i - 1, i, 0, shared->dim_E0_2, shared->dim_E0_1) + odin_sum2<real_type>(shared->S0.data(), i - 1, i, 0, shared->dim_S0_2, shared->dim_S0_1) + odin_sum2<real_type>(shared->P0.data(), i - 1, i, 0, shared->dim_P0_2, shared->dim_P0_1) + odin_sum2<real_type>(shared->F0.data(), i - 1, i, 0, shared->dim_F0_2, shared->dim_F0_1) + odin_sum2<real_type>(shared->R0.data(), i - 1, i, 0, shared->dim_R0_2, shared->dim_R0_1);
  }
  for (int i = 1; i <= shared->dim_P_1; ++i) {
    for (int j = 1; j <= shared->dim_P_2; ++j) {
      shared->initial_P[i - 1 + shared->dim_P_1 * (j - 1)] = shared->P0[shared->dim_P0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_R_1; ++i) {
    for (int j = 1; j <= shared->dim_R_2; ++j) {
      shared->initial_R[i - 1 + shared->dim_R_1 * (j - 1)] = shared->R0[shared->dim_R0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_S_1; ++i) {
    for (int j = 1; j <= shared->dim_S_2; ++j) {
      shared->initial_S[i - 1 + shared->dim_S_1 * (j - 1)] = shared->S0[shared->dim_S0_1 * (j - 1) + i - 1];
    }
  }
  for (int i = 1; i <= shared->dim_prev_A; ++i) {
    shared->initial_prev_A[i - 1] = odin_sum2<real_type>(shared->A0.data(), i - 1, i, 0, shared->dim_A0_2, shared->dim_A0_1) / (real_type) (shared->U0[i - 1] + odin_sum2<real_type>(shared->A0.data(), i - 1, i, 0, shared->dim_A0_2, shared->dim_A0_1) + odin_sum2<real_type>(shared->E0.data(), i - 1, i, 0, shared->dim_E0_2, shared->dim_E0_1) + odin_sum2<real_type>(shared->S0.data(), i - 1, i, 0, shared->dim_S0_2, shared->dim_S0_1) + odin_sum2<real_type>(shared->P0.data(), i - 1, i, 0, shared->dim_P0_2, shared->dim_P0_1) + odin_sum2<real_type>(shared->F0.data(), i - 1, i, 0, shared->dim_F0_2, shared->dim_F0_1) + odin_sum2<real_type>(shared->R0.data(), i - 1, i, 0, shared->dim_R0_2, shared->dim_R0_1));
  }
  for (int i = 1; i <= shared->dim_prev_R; ++i) {
    shared->initial_prev_R[i - 1] = odin_sum2<real_type>(shared->R0.data(), i - 1, i, 0, shared->dim_R0_2, shared->dim_R0_1) / (real_type) (shared->U0[i - 1] + odin_sum2<real_type>(shared->A0.data(), i - 1, i, 0, shared->dim_A0_2, shared->dim_A0_1) + odin_sum2<real_type>(shared->E0.data(), i - 1, i, 0, shared->dim_E0_2, shared->dim_E0_1) + odin_sum2<real_type>(shared->S0.data(), i - 1, i, 0, shared->dim_S0_2, shared->dim_S0_1) + odin_sum2<real_type>(shared->P0.data(), i - 1, i, 0, shared->dim_P0_2, shared->dim_P0_1) + odin_sum2<real_type>(shared->F0.data(), i - 1, i, 0, shared->dim_F0_2, shared->dim_F0_1) + odin_sum2<real_type>(shared->R0.data(), i - 1, i, 0, shared->dim_R0_2, shared->dim_R0_1));
  }
  return dust::pars_type<model>(shared, internal);
}
template <>
cpp11::sexp dust_info<model>(const dust::pars_type<model>& pars) {
  const model::internal_type internal = pars.internal;
  const std::shared_ptr<const model::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "infections_inc", "gas_pharyngitis_inc", "scarlet_fever_inc", "scarlet_fever_cases", "igas_inc", "births_inc", "net_leavers_inc", "beta_t", "daily_gas_pharyngitis_rate", "daily_scarlet_fever_rate", "etiologic_fraction", "daily_gas_pharyngitis_rate_04", "daily_gas_pharyngitis_rate_05_14", "daily_gas_pharyngitis_rate_15_44", "daily_gas_pharyngitis_rate_45_64", "daily_gas_pharyngitis_rate_65_74", "daily_gas_pharyngitis_rate_75", "daily_scarlet_fever_rate_04", "daily_scarlet_fever_rate_05_14", "daily_scarlet_fever_rate_15_44", "daily_scarlet_fever_rate_45_64", "daily_scarlet_fever_rate_65_74", "daily_scarlet_fever_rate_75", "scarlet_fever_inc_04", "scarlet_fever_inc_05_14", "scarlet_fever_inc_15_44", "scarlet_fever_inc_45_64", "scarlet_fever_inc_65_74", "scarlet_fever_inc_75", "etiologic_fraction_04", "etiologic_fraction_05_14", "etiologic_fraction_15_44", "etiologic_fraction_45_64", "etiologic_fraction_65_74", "etiologic_fraction_75", "U", "N", "prev_A", "prev_R", "A", "E", "S", "P", "F", "R"});
  cpp11::writable::list dim(46);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({1});
  dim[7] = cpp11::writable::integers({1});
  dim[8] = cpp11::writable::integers({1});
  dim[9] = cpp11::writable::integers({1});
  dim[10] = cpp11::writable::integers({1});
  dim[11] = cpp11::writable::integers({1});
  dim[12] = cpp11::writable::integers({1});
  dim[13] = cpp11::writable::integers({1});
  dim[14] = cpp11::writable::integers({1});
  dim[15] = cpp11::writable::integers({1});
  dim[16] = cpp11::writable::integers({1});
  dim[17] = cpp11::writable::integers({1});
  dim[18] = cpp11::writable::integers({1});
  dim[19] = cpp11::writable::integers({1});
  dim[20] = cpp11::writable::integers({1});
  dim[21] = cpp11::writable::integers({1});
  dim[22] = cpp11::writable::integers({1});
  dim[23] = cpp11::writable::integers({1});
  dim[24] = cpp11::writable::integers({1});
  dim[25] = cpp11::writable::integers({1});
  dim[26] = cpp11::writable::integers({1});
  dim[27] = cpp11::writable::integers({1});
  dim[28] = cpp11::writable::integers({1});
  dim[29] = cpp11::writable::integers({1});
  dim[30] = cpp11::writable::integers({1});
  dim[31] = cpp11::writable::integers({1});
  dim[32] = cpp11::writable::integers({1});
  dim[33] = cpp11::writable::integers({1});
  dim[34] = cpp11::writable::integers({1});
  dim[35] = cpp11::writable::integers({1});
  dim[36] = cpp11::writable::integers({shared->dim_U});
  dim[37] = cpp11::writable::integers({shared->dim_N});
  dim[38] = cpp11::writable::integers({shared->dim_prev_A});
  dim[39] = cpp11::writable::integers({shared->dim_prev_R});
  dim[40] = cpp11::writable::integers({shared->dim_A_1, shared->dim_A_2});
  dim[41] = cpp11::writable::integers({shared->dim_E_1, shared->dim_E_2});
  dim[42] = cpp11::writable::integers({shared->dim_S_1, shared->dim_S_2});
  dim[43] = cpp11::writable::integers({shared->dim_P_1, shared->dim_P_2});
  dim[44] = cpp11::writable::integers({shared->dim_F_1, shared->dim_F_2});
  dim[45] = cpp11::writable::integers({shared->dim_R_1, shared->dim_R_2});
  dim.names() = nms;
  cpp11::writable::list index(46);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = cpp11::writable::integers({7});
  index[7] = cpp11::writable::integers({8});
  index[8] = cpp11::writable::integers({9});
  index[9] = cpp11::writable::integers({10});
  index[10] = cpp11::writable::integers({11});
  index[11] = cpp11::writable::integers({12});
  index[12] = cpp11::writable::integers({13});
  index[13] = cpp11::writable::integers({14});
  index[14] = cpp11::writable::integers({15});
  index[15] = cpp11::writable::integers({16});
  index[16] = cpp11::writable::integers({17});
  index[17] = cpp11::writable::integers({18});
  index[18] = cpp11::writable::integers({19});
  index[19] = cpp11::writable::integers({20});
  index[20] = cpp11::writable::integers({21});
  index[21] = cpp11::writable::integers({22});
  index[22] = cpp11::writable::integers({23});
  index[23] = cpp11::writable::integers({24});
  index[24] = cpp11::writable::integers({25});
  index[25] = cpp11::writable::integers({26});
  index[26] = cpp11::writable::integers({27});
  index[27] = cpp11::writable::integers({28});
  index[28] = cpp11::writable::integers({29});
  index[29] = cpp11::writable::integers({30});
  index[30] = cpp11::writable::integers({31});
  index[31] = cpp11::writable::integers({32});
  index[32] = cpp11::writable::integers({33});
  index[33] = cpp11::writable::integers({34});
  index[34] = cpp11::writable::integers({35});
  index[35] = cpp11::writable::integers({36});
  index[36] = integer_sequence(37, shared->dim_U);
  index[37] = integer_sequence(shared->offset_variable_N + 1, shared->dim_N);
  index[38] = integer_sequence(shared->offset_variable_prev_A + 1, shared->dim_prev_A);
  index[39] = integer_sequence(shared->offset_variable_prev_R + 1, shared->dim_prev_R);
  index[40] = integer_sequence(shared->offset_variable_A + 1, shared->dim_A);
  index[41] = integer_sequence(shared->offset_variable_E + 1, shared->dim_E);
  index[42] = integer_sequence(shared->offset_variable_S + 1, shared->dim_S);
  index[43] = integer_sequence(shared->offset_variable_P + 1, shared->dim_P);
  index[44] = integer_sequence(shared->offset_variable_F + 1, shared->dim_F);
  index[45] = integer_sequence(shared->offset_variable_R + 1, shared->dim_R);
  index.names() = nms;
  size_t len = shared->offset_variable_R + shared->dim_R;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
}
